import { useState } from 'react';
import { useOptimizedAuthContext } from '@/contexts/OptimizedAuthContext';
import { useToast } from '@/hooks/use-toast';
import { useGeneralContent } from '@/hooks/useGeneralContent';
import { GeneralContentItem } from '@/types/generalContent';
import { generalContentTypes } from '@/components/general-content/generalContentTypes';
import { triggerGeneralContentGeneration } from '@/services/generalContentApi';

export function useGeneralContentGeneration() {
  const { user } = useOptimizedAuthContext();
  const { toast } = useToast();
  const { createGeneralContent, isCreating } = useGeneralContent({
    category: 'all',
    derivativeType: 'all',
    status: 'all',
    search: '',
    page: 1,
    pageSize: 10
  });
  const [selectedTypes, setSelectedTypes] = useState<string[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);

  const handleTypeToggle = (type: string) => {
    setSelectedTypes(prev => 
      prev.includes(type) 
        ? prev.filter(t => t !== type)
        : [...prev, type]
    );
  };

  const handleGenerate = async (category: 'General' | 'Social' | 'Ads', sourceItem?: GeneralContentItem) => {
    if (selectedTypes.length === 0) {
      toast({
        title: 'No types selected',
        description: 'Please select at least one content type to generate.',
        variant: 'destructive',
      });
      return;
    }

    if (!user?.id) {
      toast({
        title: 'Authentication required',
        description: 'Please log in to generate content.',
        variant: 'destructive',
      });
      return;
    }

    setIsGenerating(true);

    try {
      // Try to trigger webhook first
      if (sourceItem) {
        await triggerGeneralContentGeneration({
          sourceItemId: sourceItem.id,
          selectedTypes,
          category,
          userId: user.id
        });
      } else {
        // For new content generation without source
        await triggerGeneralContentGeneration({
          selectedTypes,
          category,
          userId: user.id
        });
      }
      
      toast({
        title: 'Generation Started',
        description: 'Content generation has been triggered. You will be notified when complete.',
      });
    } catch (webhookError) {
      console.log('Webhook failed, falling back to local generation:', webhookError);
      
      // Fallback to local generation if webhook fails
      try {
        for (const type of selectedTypes) {
          const typeInfo = generalContentTypes[category].find(t => t.type === type);
          if (!typeInfo) continue;

          // Create placeholder content based on source or generate new
          let content = null;
          let title = '';
          let targetAudience = 'General audience';
          
          if (sourceItem) {
            title = `${typeInfo.title} - Based on "${sourceItem.title}"`;
            content = `This ${typeInfo.title.toLowerCase()} is generated based on the original content: "${sourceItem.title}". `;
            targetAudience = sourceItem.target_audience || 'General audience';
            
            if (sourceItem.content) {
              content += `\n\nOriginal content summary: ${sourceItem.content.substring(0, 200)}...`;
            }
          } else {
            title = `AI Generated ${typeInfo.title}`;
            content = `This is a sample ${typeInfo.title.toLowerCase()} generated by AI. It would contain relevant content based on the selected parameters and requirements.`;
          }
          
          // Add category-specific content
          if (category === 'Social') {
            content += '\n\n#AI #ContentGeneration #SocialMedia';
          } else if (category === 'Ads') {
            content += '\n\nCall to action: Learn more about our services!';
          }
          
          await createGeneralContent({
            title,
            content,
            derivative_type: type,
            category,
            content_type: typeInfo.content_type,
            source_type: sourceItem ? 'manual' : 'manual',
            source_data: sourceItem ? { 
              source_item_id: sourceItem.id,
              generated_from: sourceItem.title 
            } : { generated: true },
            target_audience: targetAudience
          });
        }
        
        toast({
          title: 'Content Generated',
          description: 'Your content items have been created successfully.',
        });
      } catch (fallbackError) {
        console.error('Fallback generation failed:', fallbackError);
        toast({
          title: 'Generation Failed',
          description: 'Failed to generate content. Please try again.',
          variant: 'destructive',
        });
      }
    } finally {
      setIsGenerating(false);
      setSelectedTypes([]);
    }
  };

  const resetSelection = () => {
    setSelectedTypes([]);
  };

  return {
    selectedTypes,
    isGenerating: isGenerating || isCreating,
    handleTypeToggle,
    handleGenerate,
    resetSelection
  };
}